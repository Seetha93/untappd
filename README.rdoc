== untappd API

Wrapper around the Untappd API. This organizes the untappd api 
into proper RESTFUL objects. See API coverage below for mapping from
the API documentation.

* You will need to register for an API key: http://untappd.com/api/register
* Attempting to wrap all the API documented here: http://untappd.com/api/docs/v3
* All options can be passed into the calls
* Untappd v3 doesn't support oauth so you must pass your username and password
* passwords are md5 hashed before they sent over the wire
* all returns are wrapped in a Hashie::Mash

== Releases

* 0.0.5 Brewery Info and Search
* 0.0.4 Complete coverage of v3 API. Checkins, Comments, Toasts, gmt_offset configuration
* 0.0.3 Venue Info & Feed, Trending Beer, Brewery Feed, Checkin info & Feed (the pub), Renamed Beer.checkins to Beer.feed
* 0.0.2 User feed, distinct beers, info, badges, friends, wish list
* 0.0.1 Beer Search, Info and Checkins

== API Coverage

Beer Object
* Beer Feed - Untappd::Beer.feed(beer_id, options={})
* Beer Info - Untappd::Beer.info(beer_id, options={})
* Beer Search - Untappd::Beer.search(q, options={})
* Trending - Untappd::Beer.trending(options={})

User Object
* User Feed - Untappd::User.feed(user, options={})
* User Info - Untappd::User.info(user, options={})
* User Badges - Untappd::User.badges(user, options={})
* User Friends - Untappd::User.friends(user, options={})
* User Wish List - Untappd::User.wish_list(user, options={})
* User Distinct Beers - Untappd::User.distinct(user, options={})
* Friend Feed - Untappd::User.friend_feed(username, password, options={})

Venue Object
* Venue Feed - Untappd::Venue.feed(venue_id, options={})
* Venue Info - Untappd::Venue.info(venue_id, options={})

Brewery Object
* Brewery Checkins - Untappd::Brewery.feed(brewery_id, options={})
* Brewery Info - Untappd::Brewery.info(brewery_id, options={})
* Brewery Search - Untappd::Brewery.search(q, options={})

Checkin Object
* The Pub Feed - Untappd::Checkin.feed(options={})
* Checkin Info - Untappd::Checkin.info(checkin_id, options={})
* Checkin (Test) - Untappd::Checkin.test(username, password, beer_id, options={})
* Checkin - Untappd::Checkin.create(username, password, beer_id, options={})
* Add Comment - Untappd::Checkin.add_comment(username, password, checkin_id, comment)
* Remove Comment - Untappd::Checkin.remove_comment(username, password, comment_id)
* Toast - Untappd::Checkin.toast(username, password, checkin_id)
* Remove Toast - Untappd::Checkin.untoast(username, password, checkin_id)

TODO
* /v3/friends_pending
* /v3/friends_request
* /v3/friends_reject
* /v3/friends_approve
* /v3/friends_revoke
 
* /v3/add_to_wish
* /v3/remove_from_wish

== Examples
Add to your GemFile
  
  gem 'untappd'
  
Configure your API KEY

  Untappd.configure do |config|
    config.apikey = 'YOUR_API_KEY'
    config.gmt_offset = -5
  end

Get all the checkins for Arrogant Bastard Ale

  checkins = Untappd::Beer.feed(18099) # or Untappd::User.feed("cmar")
  checkins.each do |checkin|
    puts "#{checkin.user.first_name} at #{checkin.created_at}" 
  end

Create Checkin
  #foursqure, lat, lng are optional
  Untappd::Checkin.create("cmar", "PASSWORD", 4665,
              :foursquare_id => "4ad6bf91f964a520380821e3",
              :user_lat => "51.4718",
              :user_lng => "-0.489278")
              
Search for beers with the name Stone

  beers = Untappd::Beer.search('stone')
  beers.each do |beer|
     puts "#{beer.beer_name}" 
  end

Get extended info for Arrogant Bastard Ale

  info = Untappd::Beer.info(18099)
  puts "#{info.name} by #{info.brewery}"
  
All Methods can take additional options specified in the API

  checkins = Untappd::Beer.checkins(18099, :offset => 100)
  
  beers = Untappd::Beer.search('stone', :sort => "count")

== Debugging
You can dump any result to see what values are available with

  info = Untappd::Beer.info(18099)
  puts info.inspect